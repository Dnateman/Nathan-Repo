frappe.ui.form.on('Employee', {
	refresh(frm){
        if(frm.doc.__islocal){
            LimitUserAccess(frm)
        }
        
	},
	onload(frm) {
        
		if(frm.doc.__islocal === 1){
            filterDepartmentNotSaved(frm)
			filterSectionNotSaved(frm)
		}else{
            filterDepartmentSaved(frm)
            filterSectionSaved(frm) 
        }
	},
    before_load(frm){
		allowed_role_based_on_perm(frm)
    },
	company(frm){
		filterDivision(frm)
	},
	division(frm){
		if(frm.doc.__islocal === 1){
            filterDepartmentNotSaved(frm)
		}else{
            filterDepartmentSaved(frm)
        }
	},
	async department(frm){
		if(frm.doc.__islocal === 1){
			filterSectionNotSaved(frm)
		}else{
            filterSectionSaved(frm) 
        }
        setDepartmentDivision(frm)
	},
    async section(frm){
        setDepartment(frm)
    },
    after_save(frm){
        autoEmpIDinUser(frm)
        frm.set_value('biometrics_id', frm.doc.employee_id)
    },
    employee_id(frm){
      frm.set_value('biometrics_id', frm.doc.employee_id)
    },
    validate: function(frm) {
       vaidateBday(frm)
    },
    before_save(frm){
        ComputeMGross(frm)  
    }
	
})

function ComputeMGross(frm){
    let newMGross = 0
    let MRate = frm.doc.rate

    let monhtly_salary = 0
    switch (frm.doc.rate_type) {
        case "Monthly Rate":
                monhtly_salary = MRate
            break;
        case "Daily Rate":
                monhtly_salary = (MRate * frm.doc.total_yr_days)  / 12 
            break;
        case "Hourly Rate":
                monhtly_salary = ((MRate * frm.doc.no_hours) * frm.doc.total_yr_days)  / 12
            break;
        default:

            break;
    }


    if(frm.doc.other_compensation_and_benefits_table != 1){
        $.each(frm.doc.other_compensation_and_benefits_table, async function(i,row){
            monhtly_salary += row.amount
        })
    }
    frm.set_value('monthly_gross', monhtly_salary)
    console.log(monhtly_salary)
}


async function autoEmpIDinUser(frm) {
    if (frm.doc.user_id) {
        let _usr_details = await get_UserDet(frm, frm.doc.user_id);
        console.log('usr', _usr_details[0].username != frm.doc.name, _usr_details[0].username, frm.doc.name)
        
        if(_usr_details[0].username != frm.doc.name){
            let formatted_name = frm.doc.last_name.toUpperCase().replace(/\s+/g, '');
            //Update Single Field
            frappe.call({
                method: "frappe.client.set_value",
                args: {
                    "doctype": "User",
                    "name": frm.doc.user_id,
                    "fieldname": "username",
                    "value": formatted_name+frm.doc.name
                } 
            });
        } 
    }
}

async function get_UserDet(frm,name){
    return new Promise(resolve => {
    let _Det = [];
    let _filters = {"name": name};
    let _fields  = ["name", "username"]
    let _data = frappe.db.get_list("User",{filters: _filters, fields: _fields, limit: 100});
    var _type = typeof _data;
    if(_type != 'undefined') {
        _Det = _data;
    }
    resolve(_Det);
    });
}

function vaidateBday(frm){
     if (frm.doc.birthday) {
            let today = new Date();
            let birthday = new Date(frm.doc.birthday);
            let age = today.getFullYear() - birthday.getFullYear();
            let monthDiff = today.getMonth() - birthday.getMonth();
            let dayDiff = today.getDate() - birthday.getDate();

            // Adjust age if the birthday hasn't occurred yet this year
            if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
                age--;
            }
            console.log(age)
            if (age < 18) {
                frappe.msgprint({
                    title: __('Notification'),
                    indicator: 'red',
                    message: __('The employee must be at least 18 years old.')
                });
                frappe.validated = false;
            }
        }
}


function filterDivision(frm) {
    frm.set_query('division', function(){
        return{
            filters: [
                ["Department", "is_group", '=' , 1 ],
                ["Department", "is_root", '=' , 1 ],
                ["Department", "company", '=' , frm.doc.company]
            ]
        }
    })
}

function filterDepartmentSaved(frm) {
    frm.set_query('department', function(){
        return{
            filters: [
                ["Department", "is_group", '=' , 1 ],
                ["Department", "is_root", '=' , 0 ],
                ["Department", "parent", '=' , frm.doc.division],
                ["Department", "company", '=' , frm.doc.company]
            ]
        }
    }) 
}
function filterDepartmentNotSaved(frm) {
    frm.set_query('department', function(){
        return{
            filters: [
                ["Department", "is_group", '=' , 1 ],
                ["Department", "is_root", '=' , 0 ]
                // ["Department", "parent", '=' , frm.doc.division],
                // ["Department", "company", '=' , frm.doc.company]
            ]
        }
    }) 
}


function filterSectionSaved(frm) {
	frm.set_query('section', function(){
		return{
			filters: [
				["Department", "is_group", '=' , 0 ],
				["Department", "is_root", '=' , 0 ],
				["Department", "parent", '=' , frm.doc.department ],
				["Department", "company", '=' , frm.doc.company]
			]
		}
	}) 
}
function filterSectionNotSaved(frm) {
	frm.set_query('section', function(){
		return{
			filters: [
				["Department", "is_group", '=' , 0 ],
				["Department", "is_root", '=' , 0 ],
				//["Department", "parent", '=' , frm.doc.department ],
				//["Department", "company", '=' , frm.doc.company]
			]
		}
	}) 
}



//auto fill-out Division and Department upon selection of Section
async function setDepartment(frm) {
    // Clear fields before setting new values
    frm.set_value('company', '');
    frm.set_value('department', '');
    frm.set_value('division', '');

    const department = await frappe.db.get_list('Department', {
        filters: { name: frm.doc.section },
        fields: ['name', 'company', 'parent'],
        limit: 1
    });
    if (department.length !== 0) {
        frm.set_value('company', department[0].company);
        frm.set_value('department', department[0].parent);

        const division = await frappe.db.get_list('Department', {
            filters: { name: department[0].parent },
            fields: ['name', 'company', 'parent'],
            limit: 1
        });

        if (division.length !== 0) {
                if(division[0].company != division[0].parent){
                    frm.set_value('division', division[0].parent);
                }
        }
    }
}


//auto fill-out Division and Department upon selection of Section
async function setDepartmentDivision(frm) {
    // Clear fields before setting new values
    frm.set_value('company', '');
    frm.set_value('division', '');

    const department = await frappe.db.get_list('Department', {
        filters: { name: frm.doc.department },
        fields: ['name', 'company', 'parent'],
        limit: 1
    });
    if (department.length !== 0) {
        frm.set_value('company', department[0].company);
        frm.set_value('division', department[0].parent);
    }
}


async function CheckCurUserRole(frm) {
    let block = 0;  
    const roles = frappe.user_roles;

    function like(str, pattern) {
       
        pattern = pattern.replace(/[%_]/g, function(char) {
            return char === '%' ? '.*' : '.';
        });
        const regex = new RegExp(`^${pattern}$`, 'i');  
        return regex.test(str);
    }

    $.each(roles, function(i, row) {
       // console.log('sa labas',row)
        if (like(row, '%HR%') || like(row, '%Payroll%')) {
            block += 1;
        }
    });
    
    return block
}

async function LimitUserAccess(frm){
    const roles = frappe.user_roles;
    const block = await CheckCurUserRole(frm)
    if(block == 0 ){
        if(roles.includes("Custodian")){
            console.log('yes')
            cur_frm.set_df_property("last_name", "read_only", 1);
            cur_frm.set_df_property("first_name", "read_only", 1);
            cur_frm.set_df_property("middle_name", "read_only", 1);
            cur_frm.set_df_property("full_name", "read_only", 1);
            cur_frm.set_df_property("birthday", "read_only", 1);
            cur_frm.set_df_property("age", "read_only", 1);
            cur_frm.set_df_property("employee_id", "read_only", 1);
            cur_frm.set_df_property("biometrics_id", "read_only", 1);
            cur_frm.set_df_property("profile_picture", "read_only", 1);
            cur_frm.set_df_property("gender", "read_only", 1);
            cur_frm.set_df_property("suffix", "read_only", 1);
            cur_frm.set_df_property("nick_name", "read_only", 1);
            cur_frm.set_df_property("maiden_name", "read_only", 1);
            cur_frm.set_df_property("employee_accountability_issuance", "read_only", 1);
            cur_frm.set_df_property("employee_accountability_return", "read_only", 1);

            // cur_frm.set_df_property("section_break_1", "read_only", 1);
            // cur_frm.set_df_property("section_break_1", "read_only", 1);
            // cur_frm.set_df_property("section_break_1", "read_only", 1);
            // cur_frm.set_df_property("section_break_1", "read_only", 1);
            // cur_frm.set_df_property("section_break_1", "read_only", 1);
            // cur_frm.set_df_property("section_break_1", "read_only", 1);
            // cur_frm.set_df_property("section_break_1", "read_only", 1);
            // cur_frm.set_df_property("section_break_1", "read_only", 1);
            // cur_frm.set_df_property("section_break_1", "read_only", 1);


            cur_frm.set_df_property("section_break_14", "hidden", 1);
            cur_frm.set_df_property("section_break_15", "hidden", 1);
            cur_frm.set_df_property("section_break_29", "hidden", 1);
            cur_frm.set_df_property("section_break_16", "hidden", 1);
            cur_frm.set_df_property("section_break_111", "hidden", 1);
            cur_frm.set_df_property("section_break_71", "hidden", 1);
            cur_frm.set_df_property("section_break_60", "hidden", 1);
            cur_frm.set_df_property("section_break_23", "hidden", 1);
            cur_frm.set_df_property("section_break_42", "hidden", 1);
            cur_frm.set_df_property("section_break_114", "hidden", 1);
            cur_frm.set_df_property("section_break_118", "hidden", 1);
            cur_frm.set_df_property("section_break_109", "hidden", 1);

            cur_frm.set_df_property("educational_qualification", "hidden", 1);
            cur_frm.set_df_property("previous_work_experience", "hidden", 1);
            cur_frm.set_df_property("recruitment_section", "hidden", 1);
            cur_frm.set_df_property("timekeeping_section", "hidden", 1);
            cur_frm.set_df_property("contact_and_address_section", "hidden", 1);
            cur_frm.set_df_property("employee_benefits", "hidden", 1);
            cur_frm.set_df_property("employee_movement_history", "hidden", 1);
            cur_frm.set_df_property("contacts_section", "hidden", 1);
            cur_frm.set_df_property("emergency_contact_information", "hidden", 1);
           
        }else{
            
            cur_frm.set_df_property("section_break_14", "hidden", 1);
            cur_frm.set_df_property("section_break_15", "hidden", 1);
            cur_frm.set_df_property("section_break_29", "hidden", 1);
            cur_frm.set_df_property("section_break_16", "hidden", 1);
            cur_frm.set_df_property("section_break_111", "hidden", 1);
            cur_frm.set_df_property("section_break_71", "hidden", 1);
            cur_frm.set_df_property("section_break_60", "hidden", 1);
            cur_frm.set_df_property("section_break_23", "hidden", 1);
            cur_frm.set_df_property("section_break_42", "hidden", 1);
            cur_frm.set_df_property("section_break_114", "hidden", 1);
            cur_frm.set_df_property("section_break_118", "hidden", 1);
            cur_frm.set_df_property("section_break_109", "hidden", 1);
            cur_frm.set_df_property("educational_qualification", "hidden", 1);
            cur_frm.set_df_property("previous_work_experience", "hidden", 1);
            cur_frm.set_df_property("recruitment_section", "hidden", 1);
            cur_frm.set_df_property("timekeeping_section", "hidden", 1);
            cur_frm.set_df_property("contact_and_address_section", "hidden", 1);
            cur_frm.set_df_property("employee_benefits", "hidden", 1);
            cur_frm.set_df_property("employee_movement_history", "hidden", 1);
            cur_frm.set_df_property("contacts_section", "hidden", 1);
            cur_frm.set_df_property("emergency_contact_information", "hidden", 1);
            cur_frm.set_df_property("employee_accountability_section", "hidden", 1);

        }
    }else{
        console.log('HR to ')
    }
}

//HIDE OTHER SECTION EXCEPT GENERAL INFO
async function allowed_role_based_on_perm(frm) {
    try {
        // Fetch custom settings
        let CustomSettings = await frappe.db.get_doc("Customized Employee Settings");
        let role_table = CustomSettings.role_table;
        let role_table_list = [];
        let salary_settings = [];
        let rate_table_section = [];
        let government_settings = [];
        let other_compensation_and_benefits_table = [];
        let confidential_allowance = [];


        // Collect allowed roles into a list
        if(role_table.length != 0){
            for (let row of role_table) {
                if (row.role) {
                    role_table_list.push(row.role); 
                }
            }
        }
       
        // Get current user roles
        let cur_user_roles = frappe.user_roles;

        // Get current user email
        let current_user_email = frappe.session.user;

        // Check if current user roles match any of the allowed roles
        let hasAllowedRole = cur_user_roles.some(role => role_table_list.includes(role));

                //sample
                if(hasAllowedRole){
                    for (let i of role_table) {
                        console.group("Values for hidding / show");
                        console.log("salary",i.salary_settings)
                        console.log("rate",i.rate_table_section)
                        console.log("gov",i.government_settings)
                        console.log("other compe",i.other_compensation_and_benefits)
                        console.log("cona",i.confidential_allowance)
                        console.groupEnd();
                        if (i.salary_settings ) {
                            salary_settings.push(i.salary_settings); 
                        }
                        if(i.rate_table_section){
                            rate_table_section.push(i.rate_table_section);
                        }
                        if(i.government_settings){
                            government_settings.push(i.government_settings);
                        }
                        if(i.other_compensation_and_benefits){
                            other_compensation_and_benefits_table.push(i.other_compensation_and_benefits);
                        }
                        if(i.confidential_allowance){
                            confidential_allowance.push(i.confidential_allowance);
                        }
                    }
                }

        console.log(cur_user_roles)
        console.log(hasAllowedRole)
        console.log(role_table_list)

        console.log(salary_settings)

            if(hasAllowedRole){
                console.log(salary_settings == 1)
                if(salary_settings == 1){
                    frm.toggle_display('section_break_29', true);
                }else {
                    cur_frm.set_df_property("section_break_29", "hidden", 1);
                }
                if(rate_table_section  == 1){
                    frm.toggle_display('rate_table_section_section', true);
                }else {
                    cur_frm.set_df_property("rate_table_section_section", "hidden", 1);
                }
                if(government_settings  == 1){
                    frm.toggle_display('section_break_16', true);
                }else{
                    cur_frm.set_df_property("section_break_16", "hidden", 1);
                }
                 if(other_compensation_and_benefits_table  == 1){
                    frm.toggle_display('other_compensation_and_benefits', true);
                }else{
                    cur_frm.set_df_property("other_compensation_and_benefits", "hidden", 1);
                }
                 if(confidential_allowance  == 1){
                    frm.toggle_display('confidential_allowance', true);
                }else{
                    cur_frm.set_df_property("confidential_allowance", "hidden", 1);
                }
            }

        if(current_user_email == frm.doc.email){
            console.log("dito")
            return true

        }else{
            console.log(!hasAllowedRole)
            if(!hasAllowedRole){
                // Hide the specific section using XPath
                frm.toggle_display('section_break_14', false);
                frm.toggle_display('section_break_15', false);
                frm.toggle_display('section_break_29', false);
                frm.toggle_display('section_break_16', false);
                frm.toggle_display('section_break_71', false);
                frm.toggle_display('section_break_60', false);
                frm.toggle_display('section_break_23', false);
                frm.toggle_display('section_break_42', false);
                frm.toggle_display('section_break_114', false);
                frm.toggle_display('section_break_118', false);
                frm.toggle_display('section_break_109', false);

                frm.toggle_display('timekeeping_section', false);
                frm.toggle_display('employee_benefits', false);
                frm.toggle_display('section_break_111', false);
                frm.toggle_display('contact_and_address_section', false);
                frm.toggle_display('contacts_section', false);
                frm.toggle_display('emergency_contact_information', false);
                frm.toggle_display('passport', false);
                frm.toggle_display('educational_qualification', false);

                frm.toggle_display('employee_accountability_section', false);
                frm.toggle_display('previous_work_experience', false);
                frm.toggle_display('employee_movement_history', false);
            }else{

            return hasAllowedRole

            }
        }


    } catch (error) {
        console.error('Error in AllowedRoles function:', error);
        frappe.msgprint({
            title: __('Error'),
            indicator: 'red',
            message: __('An error occurred while processing the role check. Please try again or contact support.')
        });
    }
}