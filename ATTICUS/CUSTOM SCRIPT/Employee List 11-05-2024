frappe.ui.form.on('Employee', {
    refresh: function(frm) {
        toggle_read_only_main(frm);
        monthsInService(frm);
        
    },
    onload: function(frm) {
        //hideFields(frm)
        toggle_read_only_main(frm);
        monthsInService(frm);
    },
    non_taxable_allowance: function(frm) {
        updateTotalSalary(frm);
    },
    rate: function(frm) {
        updateTotalSalary(frm);
    },
    date_hired: function(frm) {
        monthsInService(frm);
    },

});

// Function to update total salary
function updateTotalSalary(frm) {
    let total = frm.doc.rate + parseFloat(frm.doc.non_taxable_allowance || 0);
    frm.set_value('total_salary', total);
}

// Function to get the roles of the current logged-in user
async function getCurrentLoggedUserRole() {
    return frappe.user_roles;
}

// Function to hide fields for specific user roles
async function hideFields(frm) {
    const hideFieldsFor = ['HRBP', 'Immediate Head'];
    console.log('Hide fields for',hideFieldsFor);
    const userRolesData = await getCurrentLoggedUserRole();
    console.log('user roles data',userRolesData);
    const roleMatched = userRolesData.some(role => hideFieldsFor.includes(role));
    console.log('Role Matched',roleMatched);

    if (roleMatched) {
        console.log('Role Matched');
        // Additional logic to hide fields can be added here if needed
    }
}

// Toggle read-only fields for self record access
async function toggle_read_only_main(frm) {
    if (frappe.user.name === "Administrator") return;

    const user_data = await get_logged_user_data();
    await set_fields_property(frm, user_data);
}

// Retrieve current logged user data
async function get_logged_user_data() {
    return frappe.user_defaults.Employee;
}

// Set fields to read-only if user is editing their own record
async function set_fields_property(frm, user) {
    if (user === frm.doc.name) {
        $.each(frm.fields_dict, function(i) {
            frm.set_df_property(i, 'read_only', 1);
        });
    }
}

// Function to calculate months in servicemj
function monthsInService(frm) {
    if (!frm.doc.date_hired) return;

    const start_date = new Date(frm.doc.date_hired);
    const end_date = frm.doc.date_resigned ? new Date(frm.doc.date_resigned) : new Date();


    let months = (end_date.getFullYear() - start_date.getFullYear()) * 12;
    console.log("end",end_date.getFullYear())
    console.log("start",start_date.getFullYear())

    months += end_date.getMonth() - start_date.getMonth();
    console.log("end months",end_date.getMonth())
    console.log("start months",start_date.getMonth())
    console.log("months",months)
    if (end_date.getDate() < start_date.getDate()) {
        months--;
    }

    if (months !== frm.doc.months_in_service) {
        frm.set_value('months_in_service', months >= 0 ? months : 0);
    }
}


/* END TOGGLE READ-ONLY FIELDS FUNCTIONS */

/*===============================================================================================================
NOTE: Use Blackbox AI to explain this code line by line or function by function if comments are unclear 
Change Logs:
    Date:               PIC:                    Remarks:
    2024-07-09          EJL                     Added read_only functions for HR users on self edit
=================================================================================================================*/
